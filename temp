import sim,overseer,plot,bitcoin,random
o = overseer.Overseer()
g = sim.makeGraph(o,bitcoin.Bitcoin)
#plot.plotGraph(g)
sim.runSim(g,o)
#sim.reports(g,o)



allMinerIds = set()
allMiners=[]
for n in g.nodes:
	m = g.nodes[n]['miner']
	allMinerIds.add(m.id)
	allMiners.append(m)



def printSChain(acc,node,me,t=0):
	i = node.tx.id
	s = '  '*t + str(i)
	if not node.tx.reissued and i in acc:
		s+='*'
	elif node.tx.reissued:
		if node.tx.origin == me:
			s+='='
		else:
			s+='-'
	print s
	for c in node.children:
		printSChain(acc,c,me,t+1)

def t(i=None):
	if i is None:
		i = random.randint(0,o.numMiners)
	print 'MINER',i
	m = g.nodes[i]['miner']
	acc = set([t.id for t in m.accepted])
	printSChain(acc,m.root,m.id)

t(0)




def checkHist(hist,miners):
	s = set([e.miner for e in hist if e.state == 2])
	return list(miners - s)

for t in o.allTx:
	if t.reissued:
		continue
	check = checkHist(t.history,allMinerIds)
	if check:
		print t.id




def chIds(node):
	return set([n.tx.id for n in node.children])

#try to compare all miners' views to one another...
def allRec(nodes):
	if not nodes:
		return True
	curr = nodes[0]
	ch = chIds(curr)
	for n in nodes:
		if ch != chIds(n):
			return False
	print 'go deeper'
	for d in curr.children:
		if not allRec([c for n in nodes for c in n.children if c.tx.id == d.tx.id]):
			return False
	return True

allRec([m.root for m in allMiners])



